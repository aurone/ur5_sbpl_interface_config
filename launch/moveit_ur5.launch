<launch>
    <arg name="limited" default="false"/>


    <!--Stolen from sbpl_planning_pipeline.launch may be realted to egraphs-->
    <group ns="graph_configs/ManipulatorManipLatticeEgraphConfigDefault">
        <param name="mprim_filename" value="$(find ur5_sbpl_interface_config)/config/ur5.mprim"/>
    </group>
    
    <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
    <include file="$(find ur5_moveit_config)/launch/planning_context.launch">
        <arg name="load_robot_description" value="true"/>
        <arg name="limited" value="$(arg limited)"/>
    </include>

    <!-- If needed, broadcast static tf for robot root -->
    <!--node name="virtual_joint_broadcaster_0" pkg="tf" type="static_transform_publisher"
            args="0 0 0 0 0 0 world base_link 100"/-->

    <!-- We do not have a robot connected, so publish fake joint states -->
    <node name="joint_state_publisher" pkg="joint_state_publisher"
            type="joint_state_publisher">
        <param name="/use_gui" value="false"/>
        <rosparam param="/source_list">[/move_group/fake_controller_joint_states]</rosparam>
    </node>

    <!-- Given the published joint states, publish tf for the robot links -->
    <node name="robot_state_publisher" pkg="robot_state_publisher"
            type="robot_state_publisher" respawn="true" output="screen" />

</launch>
